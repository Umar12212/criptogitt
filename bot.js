import { Telegraf } from 'telegraf';
import sqlite3 from 'sqlite3';
import fetch from 'node-fetch';

const { Database, verbose } = sqlite3;

const BOT_TOKEN = '6887837300:AAGp7-wXrUyTCTNxWfUn6Q3YLi_cp-cZOIk';  // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
const ADMIN_IDS = ['5613908842', '2104625001', '1761081461', '5225018306']; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ id –∞–¥–º–∏–Ω–æ–≤
const GROUP_CHAT_ID = '-1002114861621'; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç id –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
const COMMISSION = 2; // –ö–æ–º–∏—Å—Å–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö

const bot = new Telegraf(BOT_TOKEN);
const verboseSqlite = verbose();

function createTables(db) {
    const query = `
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
    );

    CREATE TABLE IF NOT EXISTS product_variations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        variation TEXT NOT NULL,
        price REAL NOT NULL,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS product_photos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        variation TEXT NOT NULL,
        photo_id TEXT NOT NULL,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE
    );`;

    db.exec(query, (err) => {
        if (err) {
            console.error('Error creating tables: ', err.message);
        } else {
            console.log('Tables created or already exist.');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
            const categories = ['1/4', '1/2', '1 —à—Ç—É–∫–∞', '3 —à—Ç—É–∫–∏', '5 —à—Ç—É–∫'];
            categories.forEach(category => {
                db.run(`INSERT INTO categories (name) VALUES (?)`, [category], (err) => {
                    if (err && err.message.includes('UNIQUE constraint failed')) {
                        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    } else if (err) {
                        console.error('Error inserting category: ', err.message);
                    }
                });
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ "–°—É–±—É—Ç–µ–∫—Å"
            db.get(`SELECT id FROM products WHERE name = '–°—É–±—É—Ç–µ–∫—Å'`, (err, row) => {
                if (err) {
                    console.error('Error checking product existence: ', err.message);
                    return;
                }
                if (!row) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç "–°—É–±—É—Ç–µ–∫—Å" –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    db.run(`INSERT INTO products (name) VALUES ('–°—É–±—É—Ç–µ–∫—Å')`, function (err) {
                        if (err) {
                            console.error('Error inserting product: ', err.message);
                            return;
                        }
                        const productId = this.lastID;
                        const variations = [
                            { variation: '1/4', price: 40 },
                            { variation: '1/2', price: 70 },
                            { variation: '1 —à—Ç—É–∫–∞', price: 110 },
                            { variation: '3 —à—Ç—É–∫–∏', price: 300 },
                            { variation: '5 —à—Ç—É–∫', price: 450 }
                        ];
                        const placeholders = variations.map(() => '(?, ?, ?)').join(', ');
                        const values = variations.flatMap(v => [productId, v.variation, v.price]);
                        db.run(`INSERT INTO product_variations (product_id, variation, price) VALUES ${placeholders}`, values, (err) => {
                            if (err) {
                                console.error('Error inserting product variations: ', err.message);
                            }
                        });
                    });
                }
            });
        }
    });
}



const db = new Database('./shop.db', verboseSqlite.OPEN_READWRITE | verboseSqlite.OPEN_CREATE, (err) => {
    if (err) {
        console.error('Connection error: ', err.message);
    } else {
        console.log('Connected to the shop database.');
        createTables(db);
    }
});

const languages = {
    en: {
        welcome: "Welcome to the best and most reliable shop!",
        welcomeAdmin: "Welcome Admin! Here is your panel.",
        addProduct: "Add Product",
        listProducts: "List Products",
        sendProductName: "Please send the name of the product.",
        sendProductVariations: "Please send the variations (e.g., 1/4, 1/2, 2 pieces) separated by commas.",
        sendProductPrices: "Please send the prices for each variation (e.g., 40, 70, 100) separated by commas.",
        productAdded: "Product added successfully!",
        errorAddingProduct: "Error adding product to database.",
        cryptoFail: "Failed to retrieve crypto rates. Please try again later.",
        dbError: "Error retrieving data from the database.",
        noProducts: "No products available.",
        purchaseRejected: "Your purchase has been rejected.",
        purchaseApproved: "Your purchase of %s has been approved. Thank you for your business!",
        confirmPayment: "Thank you for your payment. The transaction is being verified.",
        errorProductNotFound: "Product not found.",
        buyWithBTC: "Buy with BTC",
        buyWithLTC: "Buy with LTC",
        buyWithUSDT: "Buy with USDT",
        openShop: "Open shop",
        availableProducts: "Available products",
        support: "If you have any issues, please contact support.",
        supportButton: "Support",
        backToMenu: "Back to menu",
        adminPanel: "Admin panel",
        addPhoto: "Add Photo",
        chooseProductForPhoto: "Choose the product to which photos will be added!",
        sendPhoto: "Category - %s\nSend the photos to be added in this chat.",
        selectProduct: "Choose the product you want to purchase.",
        selectQuantity: "Choose the desired quantity.",
        paymentDetails: "Product - %s\nQuantity - %s\nPrice - $%s\n\nTo pay, choose one of the three cryptocurrencies!\nYou have 10 minutes to complete the payment, after which the request will be automatically canceled.",
        paymentRequest: "Payment request.\nProduct - %s\nQuantity - %s\nPrice - $%s\n\nAmount to be paid: `%s %s`\n\nWallet address: `%s`\n\n‚ö°Ô∏èYou must transfer the exact amount to the specified wallet address, otherwise the request will be rejected. The request will be automatically confirmed after the funds are received!",
        paymentTimeout: "‚ö†Ô∏èThe payment waiting time has expired. If you continue to create payment requests without paying, you will be permanently banned!",
        attentionOutOfPhotos: "Attention, photos ran out for the product - %s\nAdd photos.",
        photoAddedSuccessfully: "Photos successfully added üëåüèø\nCount - %d\nCategory - %s",
        selectProductToAddPhotos: "Choose the product to which photos will be added!"
    },
    ru: {
        welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!",
        welcomeAdmin: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω! –í–æ—Ç –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å.",
        addProduct: "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç",
        listProducts: "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        sendProductName: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.",
        sendProductVariations: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1/4, 1/2, 1 —à—Ç—É–∫–∞) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        sendProductPrices: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞—Ä–∏–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40, 70, 110) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
        productAdded: "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        errorAddingProduct: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
        cryptoFail: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        dbError: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        noProducts: "–ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
        purchaseRejected: "–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        purchaseApproved: "–í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–∫—É–ø–∫—É!",
        confirmPayment: "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.",
        errorProductNotFound: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        buyWithBTC: "–ö—É–ø–∏—Ç—å –∑–∞ BTC",
        buyWithLTC: "–ö—É–ø–∏—Ç—å –∑–∞ LTC",
        buyWithUSDT: "–ö—É–ø–∏—Ç—å –∑–∞ USDT",
        openShop: "–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
        availableProducts: "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
        support: "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
        supportButton: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞",
        backToMenu: "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        adminPanel: "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
        addPhoto: "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
        chooseProductForPhoto: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ!",
        sendPhoto: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - %s\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
        selectProduct: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.",
        selectQuantity: "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
        paymentDetails: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - %s\n–¶–µ–Ω–∞ - $%s\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n–£ –≤–∞—Å –±—É–¥–µ—Ç 10 –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        paymentRequest: "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - %s\n–¶–µ–Ω–∞ - $%s\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: `%s %s`\n\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: `%s`\n\n‚ö°Ô∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!",
        paymentTimeout: "‚ùóÔ∏è–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É, –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞—è –∏—Ö, –º—ã –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º –≤–∞—Å –Ω–∞–≤—Å–µ–≥–¥–∞!",
        attentionOutOfPhotos: "–í–Ω–∏–º–∞–Ω–∏–µ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ - %s\n–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        photoAddedSuccessfully: "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã üëåüèø\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - %d\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - %s",
        selectProductToAddPhotos: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ!"
    }
};

let userLangs = {};
let adminState = {};
let paymentTimeouts = {};

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
bot.start((ctx) => {
    ctx.reply('Choose your language / –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —è–∑—ã–∫:', {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'English', callback_data: 'lang_en' }],
                [{ text: '–†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.action(/lang_(en|ru)/, async (ctx) => {
    const lang = ctx.match[1];
    userLangs[ctx.from.id] = lang;
    const msgs = languages[lang];

    const isAdmin = ADMIN_IDS.includes(ctx.from.id.toString());
    if (isAdmin) {
        await ctx.editMessageText(msgs.welcomeAdmin, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: msgs.openShop, callback_data: 'open_shop' }],
                    [{ text: msgs.adminPanel, callback_data: 'admin_panel' }]
                ]
            }
        });
    } else {
        await ctx.editMessageText(msgs.welcome, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: msgs.openShop, callback_data: 'open_shop' }]
                ]
            }
        });
    }
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
bot.action('open_shop', async (ctx) => {
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.all("SELECT id, name FROM products", [], async (err, products) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }
        if (products.length === 0) {
            await ctx.reply(msgs.noProducts);
            return;
        }

        const buttons = products.map(product => [{ text: product.name, callback_data: 'select_product_' + product.id }]);
        await ctx.editMessageText(msgs.selectProduct, {
            reply_markup: {
                inline_keyboard: buttons
            }
        });

    });
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π
bot.action(/^select_product_(\d+)$/, async (ctx) => {
    const productId = ctx.match[1];
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.all("SELECT v.*, (SELECT COUNT(*) FROM product_photos WHERE product_id = v.product_id AND variation = v.variation) as photo_count FROM product_variations v WHERE v.product_id = ?", [productId], (err, variations) => {
        if (err) {
            console.error('DB Error: ', err.message);
            ctx.reply(msgs.dbError);
            return;
        }

        if (variations.length === 0) {
            ctx.reply(msgs.noProducts);
            return;
        }

        const buttons = [
            [{ text: `1/4 - ${variations.find(v => v.variation === '1/4').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1/4').id}_1/4` },
             { text: `1/2 - ${variations.find(v => v.variation === '1/2').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1/2').id}_1/2` }],
            [{ text: `1 —à—Ç—É–∫–∞ - ${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').id}_1` }],
            [{ text: `3 —à—Ç—É–∫–∏ - ${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').id}_3` }],
            [{ text: `5 —à—Ç—É–∫ - ${variations.find(v => v.variation === '5 —à—Ç—É–∫').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '5 —à—Ç—É–∫').id}_5` }]
        ];

        ctx.reply(msgs.selectQuantity, {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã
bot.action(/select_quantity_(\d+)_(.+)/, async (ctx) => {
    const [_, variationId, variation] = ctx.match;
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.get("SELECT v.*, p.name FROM product_variations v JOIN products p ON v.product_id = p.id WHERE v.id = ?", [variationId], async (err, variation) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }

        if (!variation) {
            await ctx.reply(msgs.errorProductNotFound);
            return;
        }

        const totalPrice = variation.price; // –ù–µ –≤–∫–ª—é—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ü–µ–Ω—É
        const paymentDetails = msgs.paymentDetails.replace('%s', variation.name).replace('%s', variation.variation).replace('%s', totalPrice);

        await ctx.editMessageText(paymentDetails, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'BTC', callback_data: `buy_${variation.id}_btc` }, { text: 'LTC', callback_data: `buy_${variation.id}_ltc` }],
                    [{ text: 'USDT', callback_data: `buy_${variation.id}_usdt` }],
                    [{ text: msgs.backToMenu, callback_data: `back_to_shop_${variation.product_id}` }]
                ]
            }
        });
    });
});

bot.action(/back_to_shop_(\d+)/, async (ctx) => {
    const productId = ctx.match[1];
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.all("SELECT v.*, (SELECT COUNT(*) FROM product_photos WHERE product_id = v.product_id AND variation = v.variation) as photo_count FROM product_variations v WHERE v.product_id = ?", [productId], async (err, variations) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }

        if (variations.length === 0) {
            await ctx.reply(msgs.noProducts);
            return;
        }

        const buttons = [
            [{ text: `1/4 - ${variations.find(v => v.variation === '1/4').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1/4').id}_1/4` },
             { text: `1/2 - ${variations.find(v => v.variation === '1/2').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1/2').id}_1/2` }],
            [{ text: `1 —à—Ç—É–∫–∞ - ${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').id}_1` }],
            [{ text: `3 —à—Ç—É–∫–∏ - ${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').id}_3` }],
            [{ text: `5 —à—Ç—É–∫ - ${variations.find(v => v.variation === '5 —à—Ç—É–∫').price}$`, callback_data: `select_quantity_${variations.find(v => v.variation === '5 —à—Ç—É–∫').id}_5` }]
        ];

        await ctx.editMessageText(msgs.selectQuantity, {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
    });
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
bot.action(/buy_(\d+)_(btc|ltc|usdt)/, async (ctx) => {
    const [_, variationId, currency] = ctx.match;
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    const rates = await getCryptoRates();

    db.get("SELECT v.*, p.name FROM product_variations v JOIN products p ON v.product_id = p.id WHERE v.id = ?", [variationId], async (err, variation) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }
        if (!variation) {
            await ctx.reply(msgs.errorProductNotFound);
            return;
        }

        const totalPrice = variation.price + COMMISSION; // –í–∫–ª—é—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –≤ –æ–±—â—É—é —Ü–µ–Ω—É
        let priceInCrypto;
        let paymentAddress;

        if (rates) {
            switch (currency) {
                case 'btc':
                    priceInCrypto = (totalPrice / rates.bitcoin.usd).toFixed(8);
                    paymentAddress = 'bc1q8zanhdyqp4xy3lk2y87v9y8a7na09v68wl02gs';
                    break;
                case 'ltc':
                    priceInCrypto = (totalPrice / rates.litecoin.usd).toFixed(8);
                    paymentAddress = 'ltc1qnuvrd0u93j4w932sthf3etgc9dyu5t94heaxjj';
                    break;
                case 'usdt':
                    priceInCrypto = (totalPrice / rates.tether.usd).toFixed(8);
                    paymentAddress = 'THmpBZeW6n8LFpvWX37VGeZCy5hoQVgDgJ';
                    break;
            }
        }

        const paymentMessage = msgs.paymentRequest
    .replace('%s', variation.name)
    .replace('%s', variation.variation)
    .replace('%s', variation.price) // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ü–µ–Ω—É –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
    .replace('%s', priceInCrypto) // –ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º—ã
    .replace('%s', currency.toUpperCase())
    .replace('%s', paymentAddress); // –ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞

await ctx.editMessageText(paymentMessage, {
    reply_markup: {
        inline_keyboard: [
            [{ text: `–Ø –æ–ø–ª–∞—Ç–∏–ª - ${variation.variation}`, callback_data: `paid_${variation.id}_${ctx.from.id}_${currency}` }],
            [{ text: msgs.backToMenu, callback_data: `select_quantity_${variation.id}_${variation.variation}` }]
        ]
    }
});

    });
});


bot.action(/paid_(\d+)_(\d+)_(btc|ltc|usdt)_(.+)/, async (ctx) => {
    const [_, variationId, userId, currency, paymentAddress] = ctx.match;
    const lang = userLangs[userId] || 'en';
    const msgs = languages[lang];

    const product = await getProduct(variationId);
    if (!product) {
        await ctx.reply(msgs.errorProductNotFound);
        return;
    }

    const rates = await getCryptoRates();

    if (!rates) {
        await ctx.reply(msgs.cryptoFail);
        return;
    }

    let priceInCrypto;
    switch (currency) {
        case 'btc':
            priceInCrypto = (product.price + COMMISSION) / rates.bitcoin.usd;
            break;
        case 'ltc':
            priceInCrypto = (product.price + COMMISSION) / rates.litecoin.usd;
            break;
        case 'usdt':
            priceInCrypto = (product.price + COMMISSION) / rates.tether.usd;
            break;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    if (paymentTimeouts[userId]) {
        clearTimeout(paymentTimeouts[userId]);
        delete paymentTimeouts[userId];
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
    const adminMessage = `–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É.\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - ${product.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ${product.variation}\n–¶–µ–Ω–∞ - ${product.price}$\n–ò–º—è - ${ctx.from.first_name}\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: \`${priceInCrypto.toFixed(8)} ${currency.toUpperCase()}\`\n\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: \`${paymentAddress}\`\n\n‚ö°Ô∏è–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!`;

    await bot.telegram.sendMessage(GROUP_CHAT_ID, adminMessage, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'Approve', callback_data: `approve_${variationId}_${userId}` }],
                [{ text: 'Reject', callback_data: `reject_${variationId}_${userId}` }]
            ]
        }
    });

    await ctx.reply(msgs.confirmPayment);
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
bot.action(/approve_(\d+)_(\d+)/, async (ctx) => {
    const [_, variationId, userId] = ctx.match;
    const userLang = userLangs[userId] || 'en';
    const msgs = languages[userLang];

    const product = await getProduct(variationId);
    if (!product) {
        await ctx.reply('Error: Product not found.');
        return;
    }

    // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å–∫–ª–∞–¥–µ
    db.get("SELECT id, photo_id FROM product_photos WHERE product_id = ? AND variation = ? LIMIT 1", [product.product_id, product.variation], async (err, photo) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }
        if (photo) {
            db.run("DELETE FROM product_photos WHERE id = ?", [photo.id], async (err) => {
                if (err) {
                    console.error('DB Error: ', err.message);
                    await ctx.reply(msgs.dbError);
                    return;
                }

                await bot.telegram.sendPhoto(userId, photo.photo_id, { caption: '–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!' });
                await ctx.reply('Purchase approved.');
            });
        } else {
            await ctx.reply(msgs.errorProductNotFound);
        }
    });
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
bot.action(/reject_(\d+)_(\d+)/, async (ctx) => {
    const [_, variationId, userId] = ctx.match;
    const lang = userLangs[userId] || 'en';
    const msgs = languages[lang];

    await bot.telegram.sendMessage(userId, msgs.purchaseRejected);
    await ctx.reply('Purchase rejected.');
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.action('open_shop', async (ctx) => {
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    if (ctx.from.id.toString() === ADMIN_ID) {
        db.all("SELECT id, name FROM products", [], (err, products) => {
            if (err) {
                console.error('DB Error: ', err.message);
                ctx.reply(msgs.dbError);
                return;
            }
            if (products.length === 0) {
                ctx.reply(msgs.noProducts);
                return;
            }

            const buttons = products.map(product => [{ text: product.name, callback_data: 'select_product_for_photo_' + product.id }]);
            ctx.reply(msgs.chooseProductForPhoto, {
                reply_markup: {
                    inline_keyboard: buttons
                }
            });
        });
    } else {
        // –ö–æ–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.all("SELECT id, name FROM products", [], (err, products) => {
            if (err) {
                console.error('DB Error: ', err.message);
                ctx.reply(msgs.dbError);
                return;
            }
            if (products.length === 0) {
                ctx.reply(msgs.noProducts);
                return;
            }

            const buttons = products.map(product => [{ text: product.name, callback_data: 'select_product_' + product.id }]);
            ctx.reply(msgs.availableProducts, {
                reply_markup: {
                    inline_keyboard: buttons
                }
            });
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.action(/^select_product_for_photo_(\d+)$/, async (ctx) => {
    const productId = ctx.match[1];
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.all("SELECT v.*, (SELECT COUNT(*) FROM product_photos WHERE product_id = v.product_id AND variation = v.variation) as photo_count FROM product_variations v WHERE v.product_id = ?", [productId], (err, variations) => {
        if (err) {
            console.error('DB Error: ', err.message);
            ctx.reply(msgs.dbError);
            return;
        }

        if (variations.length === 0) {
            ctx.reply(msgs.noProducts);
            return;
        }

        const buttons = [
            [
                { text: `1/4 - ${variations.find(v => v.variation === '1/4').photo_count} —Ñ–æ—Ç–æ`, callback_data: `add_photo_${variations.find(v => v.variation === '1/4').id}` },
                { text: `1/2 - ${variations.find(v => v.variation === '1/2').photo_count} —Ñ–æ—Ç–æ`, callback_data: `add_photo_${variations.find(v => v.variation === '1/2').id}` }
            ],
            [
                { text: `1 —à—Ç—É–∫–∞ - ${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').photo_count} —Ñ–æ—Ç–æ`, callback_data: `add_photo_${variations.find(v => v.variation === '1 —à—Ç—É–∫–∞').id}` }
            ],
            [
                { text: `3 —à—Ç—É–∫–∏ - ${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').photo_count} —Ñ–æ—Ç–æ`, callback_data: `add_photo_${variations.find(v => v.variation === '3 —à—Ç—É–∫–∏').id}` }
            ],
            [
                { text: `5 —à—Ç—É–∫ - ${variations.find(v => v.variation === '5 —à—Ç—É–∫').photo_count} —Ñ–æ—Ç–æ`, callback_data: `add_photo_${variations.find(v => v.variation === '5 —à—Ç—É–∫').id}` }
            ]
        ];

        ctx.reply(msgs.chooseProductForPhoto, {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
    });
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^add_photo_(\d+)$/, async (ctx) => {
    const variationId = ctx.match[1];
    const lang = userLangs[ctx.from.id] || 'en';
    const msgs = languages[lang];

    db.get("SELECT p.name, v.variation, v.product_id FROM product_variations v JOIN products p ON v.product_id = p.id WHERE v.id = ?", [variationId], (err, result) => {
        if (err) {
            console.error('DB Error: ', err.message);
            ctx.reply(msgs.dbError);
            return;
        }
        if (!result) {
            console.log(`Product not found for variation ID ${variationId}`);
            ctx.reply(msgs.errorProductNotFound);
            return;
        }

        adminState[ctx.from.id] = { step: 'awaiting_photo', productId: result.product_id, variation: result.variation };
        ctx.reply(msgs.sendPhoto.replace('%s', result.variation));
    });
});

bot.on('message', (ctx) => {
    if (ctx.message.photo) {
        const state = adminState[ctx.from.id];
        if (state && state.step === 'awaiting_photo') {
            console.log(`Receiving photo for category: ${state.category}`);
            const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
            const category = state.category;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.get('SELECT id FROM products WHERE name = "–°—É–±—É—Ç–µ–∫—Å"', (err, product) => {
                if (err || !product) {
                    console.error('DB Error: ', err ? err.message : 'No products found');
                    ctx.reply('Error adding photo to database.');
                    return;
                }

                if (product.id) {
                    db.run('INSERT INTO product_photos (product_id, variation, photo_id) VALUES (?, ?, ?)', [product.id, category, photoId], (err) => {
                        if (err) {
                            console.error('DB Error: ', err.message);
                            ctx.reply('Error adding photo to database.');
                            return;
                        }

                        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        db.get("SELECT COUNT(*) as photo_count FROM product_photos WHERE product_id = ? AND variation = ?", [product.id, category], (err, row) => {
                            if (err) {
                                console.error('DB Error: ', err.message);
                                ctx.reply('Error retrieving photo count from database.');
                                return;
                            }

                            console.log(`Photo added to category: ${category}`);
                            ctx.reply(`–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã üëåüèø\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ${row.photo_count}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - ${category}`);
                        });
                    });
                } else {
                    console.log('Product ID is not set');
                    ctx.reply('Error adding photo to database. Product ID is not set.');
                }
            });
        }
    }
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.action('admin_panel', async (ctx) => {
    const lang = userLangs[ctx.from.id] || 'ru';
    const msgs = languages[lang];

    db.all(`
        SELECT c.name, COUNT(p.id) as photo_count
        FROM categories c
        LEFT JOIN product_photos p ON c.name = p.variation
        GROUP BY c.name
    `, [], async (err, rows) => {
        if (err) {
            console.error('DB Error: ', err.message);
            await ctx.reply(msgs.dbError);
            return;
        }

        let responseText = `${msgs.adminPanel}\n\n`;
        rows.forEach(row => {
            responseText += `${row.name} - ${row.photo_count} —Ñ–æ—Ç–æ\n`;
        });

        const today = new Date();
        const date = today.toLocaleDateString('ru-RU');
        responseText += `\n–î–∞—Ç–∞ ${date}`;

        await ctx.reply(responseText, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: msgs.addPhoto, callback_data: 'add_photo_menu' }]
                ]
            }
        });
    });
});


// –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.action('add_photo_menu', async (ctx) => {
    const lang = userLangs[ctx.from.id] || 'ru';
    const msgs = languages[lang];

    db.all("SELECT name FROM categories", [], (err, categories) => {
        if (err) {
            console.error('DB Error: ', err.message);
            ctx.reply(msgs.dbError);
            return;
        }

        const buttons = categories.map(category => {
            return [{
                text: category.name,
                callback_data: `add_photo_${category.name.replace(' ', '_')}`
            }];
        });

        ctx.reply(msgs.chooseProductForPhoto, {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
bot.action(/^add_photo_(.+)$/, async (ctx) => {
    const category = ctx.match[1].replace('_', ' ');
    const lang = userLangs[ctx.from.id] || 'ru';
    const msgs = languages[lang];

    adminState[ctx.from.id] = { step: 'awaiting_photo', category: category };
    ctx.reply(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - ${category}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
bot.on('message', (ctx) => {
    if (ctx.message.photo) {
        const state = adminState[ctx.from.id];
        if (state && state.step === 'awaiting_photo') {
            console.log(`Receiving photo for category: ${state.category}`);
            const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
            const category = state.category;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.get('SELECT id FROM products WHERE name = "–°—É–±—É—Ç–µ–∫—Å"', (err, product) => {
                if (err || !product) {
                    console.error('DB Error: ', err ? err.message : 'No products found');
                    ctx.reply('Error adding photo to database.');
                    return;
                }
                db.run('INSERT INTO product_photos (product_id, variation, photo_id) VALUES (?, ?, ?)', [product.id, category, photoId], (err) => {
                    if (err) {
                        console.error('DB Error: ', err.message);
                        ctx.reply('Error adding photo to database.');
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    db.get("SELECT COUNT(*) as photo_count FROM product_photos WHERE product_id = ? AND variation = ?", [product.id, category], (err, row) => {
                        if (err) {
                            console.error('DB Error: ', err.message);
                            ctx.reply('Error retrieving photo count from database.');
                            return;
                        }

                        console.log(`Photo added to category: ${category}`);
                        ctx.reply(`–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã üëåüèø\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - ${row.photo_count}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ - ${category}`);
                    });
                });
            });
        }
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

async function getCryptoRates() {
    try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,litecoin,tether&vs_currencies=usd');
        const rates = await response.json();
        return rates;
    } catch (error) {
        console.error('Failed to fetch crypto rates:', error);
        return null;
    }
}

async function getProduct(variationId) {
    return new Promise((resolve, reject) => {
        db.get(`
            SELECT v.*, p.name
            FROM product_variations v
            JOIN products p ON v.product_id = p.id
            WHERE v.id = ?
        `, [variationId], (err, row) => {
            if (err) {
                console.error('DB Error fetching product: ', err.message);
                reject(err);
            } else if (row) {
                resolve(row);
            } else {
                console.log(`Product not found for variation ID ${variationId}`);
                resolve(null); // –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
            }
        });
    });
}